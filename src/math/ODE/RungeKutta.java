package math.ODE;public class RungeKutta{	// 4th-order Runge-Kutta method (see Numerical Recipes, Runge-Kutta Method)	public static void calculateDeltaF(		double t, double dt,		double f[], // function values		double df[], // array that WILL hold the change to the function values		Derivatives model)	{		int			xMax = f.length,			x;			double			// allocate memory for k1, k2, k3, k4 arrays			k1[] = new double[xMax],			k2[] = new double[xMax],			k3[] = new double[xMax],			k4[] = new double[xMax];				//		// calculation of k1		//				// let the model calculate the time derivatives at (t, f)		model.calculateDerivatives(t, f, k1);				// multiply this dfdt array by dt to get k1		for(x=0; x<xMax; x++) k1[x] *= dt;				//		// calculation of k2		//				// calculate the array f+k1/2; use df as temporary storage		for(x=0; x<xMax; x++) df[x] = f[x] + k1[x]/2.;				// let the model calculate the time derivatives at (t+dt/2, f+k1/2)		model.calculateDerivatives(t+dt/2., df, k2);				// multiply this dfdt array by dt to get k2		for(x=0; x<xMax; x++) k2[x] *= dt;				//		// calculation of k3		//				// calculate the array f+k2/2		for(x=0; x<xMax; x++) df[x] = f[x] + k2[x]/2.;				// let the model calculate the time derivatives at (t+dt/2, f+k2/2)		model.calculateDerivatives(t+dt/2., df, k3);				// multiply this dfdt array by dt to get k3		for(x=0; x<xMax; x++) k3[x] *= dt;				//		// calculation of k4		//		// calculate the array f+k3		for(x=0; x<xMax; x++) df[x] = f[x] + k3[x];				// let the model calculate the time derivatives at (t+dt, f+k3)		model.calculateDerivatives(t+dt, df, k4);				// multiply this dfdt array by dt to get k4		for(x=0; x<xMax; x++) k4[x] *= dt;				//		// sum k1/6 + k2/3 + k3/3 + k4/6 to get delta_f(t)		//				for(x=0; x<xMax; x++) df[x] = k1[x]/6. + k2[x]/3. + k3[x]/3. + k4[x]/6.;	}	// 4th-order Runge-Kutta method (see Numerical Recipes, Runge-Kutta Method)	public static void calculateStep(double t, double dt, double f[], Derivatives model)	{		// allocate memory for array that holds delta_f values		double df[] = new double[f.length];				// calculate delta_f values...		calculateDeltaF(t, dt, f, df, model);				// ... and add them to the f values to get f(t+dt)		for(int x=0; x<f.length; x++) f[x] += df[x];	}}
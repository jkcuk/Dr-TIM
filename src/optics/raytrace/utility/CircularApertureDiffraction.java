package optics.raytrace.utility;

import math.InterpolatedFunction1D;
import math.Vector3D;
import optics.raytrace.exceptions.EvanescentException;
import optics.raytrace.exceptions.InconsistencyException;
import optics.raytrace.surfaces.PhaseHologram;

/**
 * The inverse cumulative probability function for the light-ray direction change due to a circular aperture diffraction.
 * This function is calculated numerically, from a pre-calculated table of values.
 */
public class CircularApertureDiffraction
{
	// The far-field intensity distribution of a circular aperture of diameter w under normal, uniform plane-wave, illumination is of the form 
	// 	I(theta) = I_0 (2*J_1(k a sin(theta)/(k a sin(theta))^2
	// (see https://en.wikipedia.org/wiki/Diffraction).
	// Setting x = k a sin(theta)
	// This becomes the probability density p(x) = 2*(J_1(x)^2/x) of a light ray to change direction.
	// The corresponding cumulative probability distribution is P(x) = Integrate[p(x), {x, 0, r}] is then (according to Mathematica)
	// 	P(x) = 1 - J_0(x)^2 - J_1(x)^2, which is in agreement with P(x) = P_0(1 - J_0(x)^2 - J_1(x)^2) given in (https://en.wikipedia.org/wiki/Airy_disk).
	// The inverse function, x(P), is not easily expressed explicitly, but can be calculated numerically, which is what the table below is.
	// (It was calculated in the Mathematica notebook circularApertureDiffraction.nb.)
	private static double[][] PxTABLE = { { 0., 3.88085 * 10e-9 }, { 0.001, 0.0632614 }, { 0.002, 0.0894875 },
			{ 0.003, 0.109627 }, { 0.004, 0.126618 }, { 0.005, 0.141599 }, { 0.006, 0.155153 }, { 0.007, 0.167626 },
			{ 0.008, 0.179245 }, { 0.009, 0.190166 }, { 0.01, 0.200503 }, { 0.011, 0.210342 }, { 0.012, 0.219751 },
			{ 0.013, 0.228782 }, { 0.014, 0.237478 }, { 0.015, 0.245876 }, { 0.016, 0.254004 }, { 0.017, 0.261888 },
			{ 0.018, 0.269549 }, { 0.019, 0.277006 }, { 0.02, 0.284274 }, { 0.021, 0.291369 }, { 0.022, 0.298301 },
			{ 0.023, 0.305083 }, { 0.024, 0.311725 }, { 0.025, 0.318234 }, { 0.026, 0.32462 }, { 0.027, 0.330888 },
			{ 0.028, 0.337047 }, { 0.029, 0.343101 }, { 0.03, 0.349056 }, { 0.031, 0.354917 }, { 0.032, 0.360689 },
			{ 0.033, 0.366376 }, { 0.034, 0.371982 }, { 0.035, 0.37751 }, { 0.036, 0.382964 }, { 0.037, 0.388347 },
			{ 0.038, 0.393662 }, { 0.039, 0.398912 }, { 0.04, 0.404099 }, { 0.041, 0.409225 }, { 0.042, 0.414293 },
			{ 0.043, 0.419306 }, { 0.044, 0.424264 }, { 0.045, 0.42917 }, { 0.046, 0.434026 }, { 0.047, 0.438833 },
			{ 0.048, 0.443593 }, { 0.049, 0.448307 }, { 0.05, 0.452977 }, { 0.051, 0.457605 }, { 0.052, 0.462191 },
			{ 0.053, 0.466737 }, { 0.054, 0.471243 }, { 0.055, 0.475712 }, { 0.056, 0.480144 }, { 0.057, 0.48454 },
			{ 0.058, 0.488901 }, { 0.059, 0.493228 }, { 0.06, 0.497522 }, { 0.061, 0.501784 }, { 0.062, 0.506015 },
			{ 0.063, 0.510215 }, { 0.064, 0.514385 }, { 0.065, 0.518526 }, { 0.066, 0.522639 }, { 0.067, 0.526724 },
			{ 0.068, 0.530782 }, { 0.069, 0.534814 }, { 0.07, 0.538819 }, { 0.071, 0.5428 }, { 0.072, 0.546756 },
			{ 0.073, 0.550687 }, { 0.074, 0.554596 }, { 0.075, 0.55848 }, { 0.076, 0.562343 }, { 0.077, 0.566183 },
			{ 0.078, 0.570001 }, { 0.079, 0.573799 }, { 0.08, 0.577575 }, { 0.081, 0.581331 }, { 0.082, 0.585067 },
			{ 0.083, 0.588783 }, { 0.084, 0.592481 }, { 0.085, 0.596159 }, { 0.086, 0.599819 }, { 0.087, 0.60346 },
			{ 0.088, 0.607084 }, { 0.089, 0.61069 }, { 0.09, 0.61428 }, { 0.091, 0.617852 }, { 0.092, 0.621407 },
			{ 0.093, 0.624947 }, { 0.094, 0.62847 }, { 0.095, 0.631978 }, { 0.096, 0.63547 }, { 0.097, 0.638947 },
			{ 0.098, 0.642409 }, { 0.099, 0.645857 }, { 0.1, 0.64929 }, { 0.101, 0.652709 }, { 0.102, 0.656114 },
			{ 0.103, 0.659505 }, { 0.104, 0.662882 }, { 0.105, 0.666247 }, { 0.106, 0.669598 }, { 0.107, 0.672936 },
			{ 0.108, 0.676262 }, { 0.109, 0.679575 }, { 0.11, 0.682876 }, { 0.111, 0.686164 }, { 0.112, 0.689441 },
			{ 0.113, 0.692706 }, { 0.114, 0.69596 }, { 0.115, 0.699202 }, { 0.116, 0.702432 }, { 0.117, 0.705652 },
			{ 0.118, 0.708861 }, { 0.119, 0.712059 }, { 0.12, 0.715246 }, { 0.121, 0.718423 }, { 0.122, 0.72159 },
			{ 0.123, 0.724746 }, { 0.124, 0.727893 }, { 0.125, 0.73103 }, { 0.126, 0.734156 }, { 0.127, 0.737274 },
			{ 0.128, 0.740381 }, { 0.129, 0.74348 }, { 0.13, 0.746569 }, { 0.131, 0.749649 }, { 0.132, 0.75272 },
			{ 0.133, 0.755782 }, { 0.134, 0.758836 }, { 0.135, 0.76188 }, { 0.136, 0.764917 }, { 0.137, 0.767944 },
			{ 0.138, 0.770964 }, { 0.139, 0.773975 }, { 0.14, 0.776979 }, { 0.141, 0.779974 }, { 0.142, 0.782961 },
			{ 0.143, 0.785941 }, { 0.144, 0.788913 }, { 0.145, 0.791877 }, { 0.146, 0.794834 }, { 0.147, 0.797783 },
			{ 0.148, 0.800725 }, { 0.149, 0.80366 }, { 0.15, 0.806588 }, { 0.151, 0.809508 }, { 0.152, 0.812422 },
			{ 0.153, 0.815329 }, { 0.154, 0.818229 }, { 0.155, 0.821122 }, { 0.156, 0.824009 }, { 0.157, 0.826889 },
			{ 0.158, 0.829762 }, { 0.159, 0.832629 }, { 0.16, 0.83549 }, { 0.161, 0.838345 }, { 0.162, 0.841193 },
			{ 0.163, 0.844035 }, { 0.164, 0.846872 }, { 0.165, 0.849702 }, { 0.166, 0.852526 }, { 0.167, 0.855345 },
			{ 0.168, 0.858157 }, { 0.169, 0.860964 }, { 0.17, 0.863766 }, { 0.171, 0.866562 }, { 0.172, 0.869352 },
			{ 0.173, 0.872137 }, { 0.174, 0.874916 }, { 0.175, 0.87769 }, { 0.176, 0.880459 }, { 0.177, 0.883223 },
			{ 0.178, 0.885982 }, { 0.179, 0.888735 }, { 0.18, 0.891483 }, { 0.181, 0.894227 }, { 0.182, 0.896965 },
			{ 0.183, 0.899699 }, { 0.184, 0.902428 }, { 0.185, 0.905152 }, { 0.186, 0.907871 }, { 0.187, 0.910586 },
			{ 0.188, 0.913296 }, { 0.189, 0.916001 }, { 0.19, 0.918702 }, { 0.191, 0.921399 }, { 0.192, 0.924091 },
			{ 0.193, 0.926779 }, { 0.194, 0.929462 }, { 0.195, 0.932141 }, { 0.196, 0.934816 }, { 0.197, 0.937487 },
			{ 0.198, 0.940154 }, { 0.199, 0.942816 }, { 0.2, 0.945475 }, { 0.201, 0.948129 }, { 0.202, 0.95078 },
			{ 0.203, 0.953427 }, { 0.204, 0.956069 }, { 0.205, 0.958708 }, { 0.206, 0.961344 }, { 0.207, 0.963975 },
			{ 0.208, 0.966603 }, { 0.209, 0.969227 }, { 0.21, 0.971847 }, { 0.211, 0.974464 }, { 0.212, 0.977077 },
			{ 0.213, 0.979687 }, { 0.214, 0.982294 }, { 0.215, 0.984897 }, { 0.216, 0.987496 }, { 0.217, 0.990092 },
			{ 0.218, 0.992685 }, { 0.219, 0.995275 }, { 0.22, 0.997861 }, { 0.221, 1.00044 }, { 0.222, 1.00302 },
			{ 0.223, 1.0056 }, { 0.224, 1.00817 }, { 0.225, 1.01075 }, { 0.226, 1.01331 }, { 0.227, 1.01588 },
			{ 0.228, 1.01844 }, { 0.229, 1.021 }, { 0.23, 1.02355 }, { 0.231, 1.02611 }, { 0.232, 1.02866 },
			{ 0.233, 1.0312 }, { 0.234, 1.03375 }, { 0.235, 1.03629 }, { 0.236, 1.03883 }, { 0.237, 1.04136 },
			{ 0.238, 1.0439 }, { 0.239, 1.04643 }, { 0.24, 1.04896 }, { 0.241, 1.05148 }, { 0.242, 1.05401 },
			{ 0.243, 1.05653 }, { 0.244, 1.05904 }, { 0.245, 1.06156 }, { 0.246, 1.06407 }, { 0.247, 1.06658 },
			{ 0.248, 1.06909 }, { 0.249, 1.0716 }, { 0.25, 1.0741 }, { 0.251, 1.0766 }, { 0.252, 1.0791 },
			{ 0.253, 1.0816 }, { 0.254, 1.0841 }, { 0.255, 1.08659 }, { 0.256, 1.08908 }, { 0.257, 1.09157 },
			{ 0.258, 1.09405 }, { 0.259, 1.09654 }, { 0.26, 1.09902 }, { 0.261, 1.1015 }, { 0.262, 1.10398 },
			{ 0.263, 1.10645 }, { 0.264, 1.10893 }, { 0.265, 1.1114 }, { 0.266, 1.11387 }, { 0.267, 1.11634 },
			{ 0.268, 1.11881 }, { 0.269, 1.12127 }, { 0.27, 1.12373 }, { 0.271, 1.12619 }, { 0.272, 1.12865 },
			{ 0.273, 1.13111 }, { 0.274, 1.13357 }, { 0.275, 1.13602 }, { 0.276, 1.13847 }, { 0.277, 1.14092 },
			{ 0.278, 1.14337 }, { 0.279, 1.14582 }, { 0.28, 1.14827 }, { 0.281, 1.15071 }, { 0.282, 1.15315 },
			{ 0.283, 1.1556 }, { 0.284, 1.15804 }, { 0.285, 1.16047 }, { 0.286, 1.16291 }, { 0.287, 1.16535 },
			{ 0.288, 1.16778 }, { 0.289, 1.17021 }, { 0.29, 1.17264 }, { 0.291, 1.17507 }, { 0.292, 1.1775 },
			{ 0.293, 1.17993 }, { 0.294, 1.18236 }, { 0.295, 1.18478 }, { 0.296, 1.1872 }, { 0.297, 1.18963 },
			{ 0.298, 1.19205 }, { 0.299, 1.19447 }, { 0.3, 1.19688 }, { 0.301, 1.1993 }, { 0.302, 1.20172 },
			{ 0.303, 1.20413 }, { 0.304, 1.20655 }, { 0.305, 1.20896 }, { 0.306, 1.21137 }, { 0.307, 1.21378 },
			{ 0.308, 1.21619 }, { 0.309, 1.2186 }, { 0.31, 1.22101 }, { 0.311, 1.22342 }, { 0.312, 1.22582 },
			{ 0.313, 1.22823 }, { 0.314, 1.23063 }, { 0.315, 1.23303 }, { 0.316, 1.23544 }, { 0.317, 1.23784 },
			{ 0.318, 1.24024 }, { 0.319, 1.24264 }, { 0.32, 1.24504 }, { 0.321, 1.24744 }, { 0.322, 1.24983 },
			{ 0.323, 1.25223 }, { 0.324, 1.25463 }, { 0.325, 1.25702 }, { 0.326, 1.25942 }, { 0.327, 1.26181 },
			{ 0.328, 1.2642 }, { 0.329, 1.2666 }, { 0.33, 1.26899 }, { 0.331, 1.27138 }, { 0.332, 1.27377 },
			{ 0.333, 1.27616 }, { 0.334, 1.27855 }, { 0.335, 1.28094 }, { 0.336, 1.28333 }, { 0.337, 1.28572 },
			{ 0.338, 1.2881 }, { 0.339, 1.29049 }, { 0.34, 1.29288 }, { 0.341, 1.29526 }, { 0.342, 1.29765 },
			{ 0.343, 1.30004 }, { 0.344, 1.30242 }, { 0.345, 1.30481 }, { 0.346, 1.30719 }, { 0.347, 1.30957 },
			{ 0.348, 1.31196 }, { 0.349, 1.31434 }, { 0.35, 1.31672 }, { 0.351, 1.31911 }, { 0.352, 1.32149 },
			{ 0.353, 1.32387 }, { 0.354, 1.32625 }, { 0.355, 1.32864 }, { 0.356, 1.33102 }, { 0.357, 1.3334 },
			{ 0.358, 1.33578 }, { 0.359, 1.33816 }, { 0.36, 1.34054 }, { 0.361, 1.34292 }, { 0.362, 1.3453 },
			{ 0.363, 1.34769 }, { 0.364, 1.35007 }, { 0.365, 1.35245 }, { 0.366, 1.35483 }, { 0.367, 1.35721 },
			{ 0.368, 1.35959 }, { 0.369, 1.36197 }, { 0.37, 1.36435 }, { 0.371, 1.36673 }, { 0.372, 1.36911 },
			{ 0.373, 1.37149 }, { 0.374, 1.37387 }, { 0.375, 1.37625 }, { 0.376, 1.37864 }, { 0.377, 1.38102 },
			{ 0.378, 1.3834 }, { 0.379, 1.38578 }, { 0.38, 1.38816 }, { 0.381, 1.39055 }, { 0.382, 1.39293 },
			{ 0.383, 1.39531 }, { 0.384, 1.39769 }, { 0.385, 1.40008 }, { 0.386, 1.40246 }, { 0.387, 1.40484 },
			{ 0.388, 1.40723 }, { 0.389, 1.40961 }, { 0.39, 1.412 }, { 0.391, 1.41438 }, { 0.392, 1.41677 },
			{ 0.393, 1.41915 }, { 0.394, 1.42154 }, { 0.395, 1.42393 }, { 0.396, 1.42631 }, { 0.397, 1.4287 },
			{ 0.398, 1.43109 }, { 0.399, 1.43348 }, { 0.4, 1.43587 }, { 0.401, 1.43826 }, { 0.402, 1.44065 },
			{ 0.403, 1.44304 }, { 0.404, 1.44543 }, { 0.405, 1.44782 }, { 0.406, 1.45021 }, { 0.407, 1.45261 },
			{ 0.408, 1.455 }, { 0.409, 1.4574 }, { 0.41, 1.45979 }, { 0.411, 1.46219 }, { 0.412, 1.46458 },
			{ 0.413, 1.46698 }, { 0.414, 1.46938 }, { 0.415, 1.47178 }, { 0.416, 1.47418 }, { 0.417, 1.47658 },
			{ 0.418, 1.47898 }, { 0.419, 1.48138 }, { 0.42, 1.48378 }, { 0.421, 1.48619 }, { 0.422, 1.48859 },
			{ 0.423, 1.491 }, { 0.424, 1.4934 }, { 0.425, 1.49581 }, { 0.426, 1.49822 }, { 0.427, 1.50063 },
			{ 0.428, 1.50304 }, { 0.429, 1.50545 }, { 0.43, 1.50786 }, { 0.431, 1.51027 }, { 0.432, 1.51269 },
			{ 0.433, 1.5151 }, { 0.434, 1.51752 }, { 0.435, 1.51994 }, { 0.436, 1.52236 }, { 0.437, 1.52477 },
			{ 0.438, 1.5272 }, { 0.439, 1.52962 }, { 0.44, 1.53204 }, { 0.441, 1.53446 }, { 0.442, 1.53689 },
			{ 0.443, 1.53932 }, { 0.444, 1.54174 }, { 0.445, 1.54417 }, { 0.446, 1.5466 }, { 0.447, 1.54903 },
			{ 0.448, 1.55147 }, { 0.449, 1.5539 }, { 0.45, 1.55634 }, { 0.451, 1.55877 }, { 0.452, 1.56121 },
			{ 0.453, 1.56365 }, { 0.454, 1.56609 }, { 0.455, 1.56854 }, { 0.456, 1.57098 }, { 0.457, 1.57342 },
			{ 0.458, 1.57587 }, { 0.459, 1.57832 }, { 0.46, 1.58077 }, { 0.461, 1.58322 }, { 0.462, 1.58567 },
			{ 0.463, 1.58813 }, { 0.464, 1.59058 }, { 0.465, 1.59304 }, { 0.466, 1.5955 }, { 0.467, 1.59796 },
			{ 0.468, 1.60042 }, { 0.469, 1.60289 }, { 0.47, 1.60536 }, { 0.471, 1.60782 }, { 0.472, 1.61029 },
			{ 0.473, 1.61276 }, { 0.474, 1.61524 }, { 0.475, 1.61771 }, { 0.476, 1.62019 }, { 0.477, 1.62267 },
			{ 0.478, 1.62515 }, { 0.479, 1.62763 }, { 0.48, 1.63011 }, { 0.481, 1.6326 }, { 0.482, 1.63509 },
			{ 0.483, 1.63758 }, { 0.484, 1.64007 }, { 0.485, 1.64256 }, { 0.486, 1.64506 }, { 0.487, 1.64756 },
			{ 0.488, 1.65006 }, { 0.489, 1.65256 }, { 0.49, 1.65506 }, { 0.491, 1.65757 }, { 0.492, 1.66008 },
			{ 0.493, 1.66259 }, { 0.494, 1.6651 }, { 0.495, 1.66762 }, { 0.496, 1.67013 }, { 0.497, 1.67265 },
			{ 0.498, 1.67517 }, { 0.499, 1.6777 }, { 0.5, 1.68022 }, { 0.501, 1.68275 }, { 0.502, 1.68528 },
			{ 0.503, 1.68782 }, { 0.504, 1.69035 }, { 0.505, 1.69289 }, { 0.506, 1.69543 }, { 0.507, 1.69798 },
			{ 0.508, 1.70052 }, { 0.509, 1.70307 }, { 0.51, 1.70562 }, { 0.511, 1.70817 }, { 0.512, 1.71073 },
			{ 0.513, 1.71329 }, { 0.514, 1.71585 }, { 0.515, 1.71841 }, { 0.516, 1.72098 }, { 0.517, 1.72355 },
			{ 0.518, 1.72612 }, { 0.519, 1.72869 }, { 0.52, 1.73127 }, { 0.521, 1.73385 }, { 0.522, 1.73643 },
			{ 0.523, 1.73902 }, { 0.524, 1.74161 }, { 0.525, 1.7442 }, { 0.526, 1.74679 }, { 0.527, 1.74939 },
			{ 0.528, 1.75199 }, { 0.529, 1.7546 }, { 0.53, 1.7572 }, { 0.531, 1.75981 }, { 0.532, 1.76243 },
			{ 0.533, 1.76504 }, { 0.534, 1.76766 }, { 0.535, 1.77028 }, { 0.536, 1.77291 }, { 0.537, 1.77554 },
			{ 0.538, 1.77817 }, { 0.539, 1.7808 }, { 0.54, 1.78344 }, { 0.541, 1.78608 }, { 0.542, 1.78873 },
			{ 0.543, 1.79138 }, { 0.544, 1.79403 }, { 0.545, 1.79668 }, { 0.546, 1.79934 }, { 0.547, 1.802 },
			{ 0.548, 1.80467 }, { 0.549, 1.80734 }, { 0.55, 1.81001 }, { 0.551, 1.81269 }, { 0.552, 1.81537 },
			{ 0.553, 1.81805 }, { 0.554, 1.82074 }, { 0.555, 1.82343 }, { 0.556, 1.82613 }, { 0.557, 1.82883 },
			{ 0.558, 1.83153 }, { 0.559, 1.83424 }, { 0.56, 1.83695 }, { 0.561, 1.83966 }, { 0.562, 1.84238 },
			{ 0.563, 1.84511 }, { 0.564, 1.84783 }, { 0.565, 1.85056 }, { 0.566, 1.8533 }, { 0.567, 1.85604 },
			{ 0.568, 1.85878 }, { 0.569, 1.86153 }, { 0.57, 1.86428 }, { 0.571, 1.86704 }, { 0.572, 1.8698 },
			{ 0.573, 1.87256 }, { 0.574, 1.87533 }, { 0.575, 1.87811 }, { 0.576, 1.88089 }, { 0.577, 1.88367 },
			{ 0.578, 1.88646 }, { 0.579, 1.88925 }, { 0.58, 1.89205 }, { 0.581, 1.89485 }, { 0.582, 1.89765 },
			{ 0.583, 1.90046 }, { 0.584, 1.90328 }, { 0.585, 1.9061 }, { 0.586, 1.90893 }, { 0.587, 1.91176 },
			{ 0.588, 1.91459 }, { 0.589, 1.91743 }, { 0.59, 1.92028 }, { 0.591, 1.92313 }, { 0.592, 1.92599 },
			{ 0.593, 1.92885 }, { 0.594, 1.93172 }, { 0.595, 1.93459 }, { 0.596, 1.93746 }, { 0.597, 1.94035 },
			{ 0.598, 1.94324 }, { 0.599, 1.94613 }, { 0.6, 1.94903 }, { 0.601, 1.95193 }, { 0.602, 1.95484 },
			{ 0.603, 1.95776 }, { 0.604, 1.96068 }, { 0.605, 1.96361 }, { 0.606, 1.96654 }, { 0.607, 1.96948 },
			{ 0.608, 1.97243 }, { 0.609, 1.97538 }, { 0.61, 1.97834 }, { 0.611, 1.9813 }, { 0.612, 1.98427 },
			{ 0.613, 1.98725 }, { 0.614, 1.99023 }, { 0.615, 1.99322 }, { 0.616, 1.99621 }, { 0.617, 1.99921 },
			{ 0.618, 2.00222 }, { 0.619, 2.00524 }, { 0.62, 2.00826 }, { 0.621, 2.01129 }, { 0.622, 2.01432 },
			{ 0.623, 2.01736 }, { 0.624, 2.02041 }, { 0.625, 2.02347 }, { 0.626, 2.02653 }, { 0.627, 2.0296 },
			{ 0.628, 2.03268 }, { 0.629, 2.03576 }, { 0.63, 2.03885 }, { 0.631, 2.04195 }, { 0.632, 2.04506 },
			{ 0.633, 2.04817 }, { 0.634, 2.05129 }, { 0.635, 2.05442 }, { 0.636, 2.05756 }, { 0.637, 2.0607 },
			{ 0.638, 2.06385 }, { 0.639, 2.06701 }, { 0.64, 2.07018 }, { 0.641, 2.07336 }, { 0.642, 2.07654 },
			{ 0.643, 2.07973 }, { 0.644, 2.08294 }, { 0.645, 2.08615 }, { 0.646, 2.08936 }, { 0.647, 2.09259 },
			{ 0.648, 2.09583 }, { 0.649, 2.09907 }, { 0.65, 2.10232 }, { 0.651, 2.10559 }, { 0.652, 2.10886 },
			{ 0.653, 2.11214 }, { 0.654, 2.11543 }, { 0.655, 2.11873 }, { 0.656, 2.12203 }, { 0.657, 2.12535 },
			{ 0.658, 2.12868 }, { 0.659, 2.13202 }, { 0.66, 2.13536 }, { 0.661, 2.13872 }, { 0.662, 2.14209 },
			{ 0.663, 2.14546 }, { 0.664, 2.14885 }, { 0.665, 2.15225 }, { 0.666, 2.15566 }, { 0.667, 2.15908 },
			{ 0.668, 2.16251 }, { 0.669, 2.16595 }, { 0.67, 2.1694 }, { 0.671, 2.17286 }, { 0.672, 2.17634 },
			{ 0.673, 2.17982 }, { 0.674, 2.18332 }, { 0.675, 2.18683 }, { 0.676, 2.19035 }, { 0.677, 2.19388 },
			{ 0.678, 2.19742 }, { 0.679, 2.20098 }, { 0.68, 2.20455 }, { 0.681, 2.20813 }, { 0.682, 2.21172 },
			{ 0.683, 2.21533 }, { 0.684, 2.21895 }, { 0.685, 2.22258 }, { 0.686, 2.22622 }, { 0.687, 2.22988 },
			{ 0.688, 2.23355 }, { 0.689, 2.23724 }, { 0.69, 2.24094 }, { 0.691, 2.24465 }, { 0.692, 2.24838 },
			{ 0.693, 2.25212 }, { 0.694, 2.25588 }, { 0.695, 2.25965 }, { 0.696, 2.26344 }, { 0.697, 2.26724 },
			{ 0.698, 2.27105 }, { 0.699, 2.27489 }, { 0.7, 2.27873 }, { 0.701, 2.2826 }, { 0.702, 2.28648 },
			{ 0.703, 2.29037 }, { 0.704, 2.29429 }, { 0.705, 2.29821 }, { 0.706, 2.30216 }, { 0.707, 2.30612 },
			{ 0.708, 2.31011 }, { 0.709, 2.3141 }, { 0.71, 2.31812 }, { 0.711, 2.32216 }, { 0.712, 2.32621 },
			{ 0.713, 2.33028 }, { 0.714, 2.33437 }, { 0.715, 2.33848 }, { 0.716, 2.34261 }, { 0.717, 2.34676 },
			{ 0.718, 2.35093 }, { 0.719, 2.35512 }, { 0.72, 2.35934 }, { 0.721, 2.36357 }, { 0.722, 2.36782 },
			{ 0.723, 2.3721 }, { 0.724, 2.37639 }, { 0.725, 2.38071 }, { 0.726, 2.38506 }, { 0.727, 2.38942 },
			{ 0.728, 2.39381 }, { 0.729, 2.39822 }, { 0.73, 2.40266 }, { 0.731, 2.40712 }, { 0.732, 2.41161 },
			{ 0.733, 2.41612 }, { 0.734, 2.42066 }, { 0.735, 2.42522 }, { 0.736, 2.42982 }, { 0.737, 2.43443 },
			{ 0.738, 2.43908 }, { 0.739, 2.44375 }, { 0.74, 2.44846 }, { 0.741, 2.45319 }, { 0.742, 2.45795 },
			{ 0.743, 2.46275 }, { 0.744, 2.46757 }, { 0.745, 2.47242 }, { 0.746, 2.47731 }, { 0.747, 2.48223 },
			{ 0.748, 2.48718 }, { 0.749, 2.49217 }, { 0.75, 2.49719 }, { 0.751, 2.50225 }, { 0.752, 2.50734 },
			{ 0.753, 2.51247 }, { 0.754, 2.51764 }, { 0.755, 2.52284 }, { 0.756, 2.52809 }, { 0.757, 2.53337 },
			{ 0.758, 2.53869 }, { 0.759, 2.54406 }, { 0.76, 2.54947 }, { 0.761, 2.55492 }, { 0.762, 2.56042 },
			{ 0.763, 2.56596 }, { 0.764, 2.57155 }, { 0.765, 2.57719 }, { 0.766, 2.58288 }, { 0.767, 2.58861 },
			{ 0.768, 2.5944 }, { 0.769, 2.60024 }, { 0.77, 2.60613 }, { 0.771, 2.61208 }, { 0.772, 2.61809 },
			{ 0.773, 2.62415 }, { 0.774, 2.63028 }, { 0.775, 2.63646 }, { 0.776, 2.64271 }, { 0.777, 2.64902 },
			{ 0.778, 2.6554 }, { 0.779, 2.66185 }, { 0.78, 2.66837 }, { 0.781, 2.67496 }, { 0.782, 2.68163 },
			{ 0.783, 2.68838 }, { 0.784, 2.6952 }, { 0.785, 2.70211 }, { 0.786, 2.7091 }, { 0.787, 2.71618 },
			{ 0.788, 2.72335 }, { 0.789, 2.73061 }, { 0.79, 2.73797 }, { 0.791, 2.74543 }, { 0.792, 2.753 },
			{ 0.793, 2.76068 }, { 0.794, 2.76846 }, { 0.795, 2.77637 }, { 0.796, 2.7844 }, { 0.797, 2.79255 },
			{ 0.798, 2.80083 }, { 0.799, 2.80926 }, { 0.8, 2.81783 }, { 0.801, 2.82655 }, { 0.802, 2.83542 },
			{ 0.803, 2.84446 }, { 0.804, 2.85368 }, { 0.805, 2.86308 }, { 0.806, 2.87267 }, { 0.807, 2.88246 },
			{ 0.808, 2.89247 }, { 0.809, 2.9027 }, { 0.81, 2.91317 }, { 0.811, 2.9239 }, { 0.812, 2.93489 },
			{ 0.813, 2.94618 }, { 0.814, 2.95778 }, { 0.815, 2.96971 }, { 0.816, 2.98199 }, { 0.817, 2.99466 },
			{ 0.818, 3.00775 }, { 0.819, 3.02129 }, { 0.82, 3.03533 }, { 0.821, 3.04991 }, { 0.822, 3.06509 },
			{ 0.823, 3.08094 }, { 0.824, 3.09753 }, { 0.825, 3.11496 }, { 0.826, 3.13334 }, { 0.827, 3.15282 },
			{ 0.828, 3.17358 }, { 0.829, 3.19583 }, { 0.83, 3.21989 }, { 0.831, 3.24616 }, { 0.832, 3.27524 },
			{ 0.833, 3.308 }, { 0.834, 3.34585 }, { 0.835, 3.39136 }, { 0.836, 3.45001 }, { 0.837, 3.5389 },
			{ 0.838, 4.03418 }, { 0.839, 4.20198 }, { 0.84, 4.29094 }, { 0.841, 4.3579 }, { 0.842, 4.41354 },
			{ 0.843, 4.46209 }, { 0.844, 4.50571 }, { 0.845, 4.5457 }, { 0.846, 4.58288 }, { 0.847, 4.6178 },
			{ 0.848, 4.65089 }, { 0.849, 4.68245 }, { 0.85, 4.71272 }, { 0.851, 4.74189 }, { 0.852, 4.7701 },
			{ 0.853, 4.79748 }, { 0.854, 4.82413 }, { 0.855, 4.85015 }, { 0.856, 4.87561 }, { 0.857, 4.90057 },
			{ 0.858, 4.92508 }, { 0.859, 4.94921 }, { 0.86, 4.97299 }, { 0.861, 4.99647 }, { 0.862, 5.01968 },
			{ 0.863, 5.04266 }, { 0.864, 5.06543 }, { 0.865, 5.08802 }, { 0.866, 5.11047 }, { 0.867, 5.13279 },
			{ 0.868, 5.15501 }, { 0.869, 5.17716 }, { 0.87, 5.19925 }, { 0.871, 5.22131 }, { 0.872, 5.24336 },
			{ 0.873, 5.26541 }, { 0.874, 5.2875 }, { 0.875, 5.30964 }, { 0.876, 5.33185 }, { 0.877, 5.35415 },
			{ 0.878, 5.37657 }, { 0.879, 5.39912 }, { 0.88, 5.42184 }, { 0.881, 5.44475 }, { 0.882, 5.46786 },
			{ 0.883, 5.49122 }, { 0.884, 5.51484 }, { 0.885, 5.53877 }, { 0.886, 5.56304 }, { 0.887, 5.58767 },
			{ 0.888, 5.61273 }, { 0.889, 5.63824 }, { 0.89, 5.66427 }, { 0.891, 5.69087 }, { 0.892, 5.71811 },
			{ 0.893, 5.74605 }, { 0.894, 5.7748 }, { 0.895, 5.80444 }, { 0.896, 5.83509 }, { 0.897, 5.8669 },
			{ 0.898, 5.90004 }, { 0.899, 5.93471 }, { 0.9, 5.97119 }, { 0.901, 6.00979 }, { 0.902, 6.05097 },
			{ 0.903, 6.09532 }, { 0.904, 6.14367 }, { 0.905, 6.19727 }, { 0.906, 6.2581 }, { 0.907, 6.32966 },
			{ 0.908, 6.41922 }, { 0.909, 6.54769 }, { 0.91, 7.22002 }, { 0.911, 7.54354 }, { 0.912, 7.68721 },
			{ 0.913, 7.7947 }, { 0.914, 7.88472 }, { 0.915, 7.96429 }, { 0.916, 8.03692 }, { 0.917, 8.10468 },
			{ 0.918, 8.1689 }, { 0.919, 8.23053 }, { 0.92, 8.29026 }, { 0.921, 8.34866 }, { 0.922, 8.40618 },
			{ 0.923, 8.46324 }, { 0.924, 8.52021 }, { 0.925, 8.57746 }, { 0.926, 8.63537 }, { 0.927, 8.69434 },
			{ 0.928, 8.75483 }, { 0.929, 8.8174 }, { 0.93, 8.88273 }, { 0.931, 8.95172 }, { 0.932, 9.02563 },
			{ 0.933, 9.10631 }, { 0.934, 9.19676 }, { 0.935, 9.30243 }, { 0.936, 9.43538 }, { 0.937, 9.63651 },
			{ 0.938, 10.6315 }, { 0.939, 10.9166 }, { 0.94, 11.0916 }, { 0.941, 11.2322 }, { 0.942, 11.356 },
			{ 0.943, 11.4705 }, { 0.944, 11.58 }, { 0.945, 11.6875 }, { 0.946, 11.7956 }, { 0.947, 11.9069 },
			{ 0.948, 12.0246 }, { 0.949, 12.1534 }, { 0.95, 12.3021 }, { 0.951, 12.4909 }, { 0.952, 12.8133 },
			{ 0.953, 14.0211 }, { 0.954, 14.3064 }, { 0.955, 14.5152 }, { 0.956, 14.6979 }, { 0.957, 14.872 },
			{ 0.958, 15.0486 }, { 0.959, 15.2403 }, { 0.96, 15.4706 }, { 0.961, 15.83 }, { 0.962, 17.2438 },
			{ 0.963, 17.605 }, { 0.964, 17.8775 }, { 0.965, 18.1335 }, { 0.966, 18.4112 }, { 0.967, 18.7898 },
			{ 0.968, 20.3864 }, { 0.969, 20.8601 }, { 0.97, 21.2191 }, { 0.971, 21.6013 }, { 0.972, 22.3675 },
			{ 0.973, 23.9431 }, { 0.974, 24.4215 }, { 0.975, 24.9843 }, { 0.976, 26.9607 }, { 0.977, 27.5887 },
			{ 0.978, 28.4707 }, { 0.979, 30.4752 }, { 0.98, 31.3346 }, { 0.981, 33.6418 }, { 0.982, 35.6704 },
			{ 0.983, 37.1901 }, { 0.984, 39.9241 }, { 0.985, 42.7998 }, { 0.986, 45.8741 }, { 0.987, 49.2214 },
			{ 0.988, 52.842 }, { 0.989, 58.3302 }, { 0.99, 64.0235 }, { 0.991, 71.0854 }, { 0.992, 80.0745 },
			{ 0.993, 90.6451 }, { 0.994, 106.067 }, { 0.995, 127.657 }, { 0.996, 159.295 }, { 0.997, 212.513 },
			{ 0.998, 318.805 }, { 0.999, 636.787 }, { 1., 1.5193 * 10e10 } };

	/**
	 * @param P
	 * @return	x(P), the inverse cumulative probability function
	 */
	public static double calculateX(double P)
	{
		double x = 0;
		try {
			x = InterpolatedFunction1D.calculateY(P, PxTABLE);
		} catch (InconsistencyException e) {
			// this should not happen!
			e.printStackTrace();
			System.exit(-1);
		}
		return x;
	}

	/**
	 * @param P
	 * @return
	 */
	public static double calculateSinTheta(double lambda, double r, double P)
	{
		// first calculate x
		double x = calculateX(P);

		// then use the equation x = w pi / lambda sin(theta) to calculate sin(theta) from x:
		// sin(theta) = (x lambda) / (w pi)
		//note here, r is the radius of the aperture!
		return (x*lambda) / (2*r*Math.PI);
	}

	public static double getRandomSinTheta(double lambda, double r)
	{
		return calculateSinTheta(lambda, r, Math.random());
	}


	public static Vector3D getTangentialDirectionComponentChange(
			double lambda,
			double apertureRadius,
			Vector3D apertureCentre,
			Vector3D pointOnAperture,
			Vector3D normalisedApertureNormal
			)
	{
		//find a "random" radial coordinate vector to construct the vector space
		Vector3D aHat = Vector3D.getANormal(normalisedApertureNormal);
		//now get the cross product to complete the vector space. The coordinate space is now (aHat, bHat, normalisedApertureNormal)
		Vector3D bHat = Vector3D.crossProduct(normalisedApertureNormal,aHat);

		//Fully randomise the radial direction vector the light ray gets diffracted for...
		//...start by getting a random angle between 0 and 2pi...
		double randomAngle = 2*Math.PI*Math.random();
		//... and produce the corresponding direction vector.
		Vector3D rHat = Vector3D.sum(aHat.getProductWith(Math.sin(randomAngle)), bHat.getProductWith(Math.cos(randomAngle)));

		//finally, return the direction vector scaled with the diffraction order calculated before.
		return rHat.getWithLength(getRandomSinTheta(lambda, apertureRadius));


	}

	//Same method as above but now rHat, the radial  unit vector, is given
	public static Vector3D getTangentialDirectionComponentChange(
			double lambda,
			double apertureRadius,
			Vector3D rHat,
			Vector3D normalisedApertureNormal
			)
	{
		//if rHat is zero, give a random normal to the aperture.
		if(rHat == Vector3D.O)rHat = Vector3D.getANormal(normalisedApertureNormal);
		return 	rHat.getProductWith(getRandomSinTheta(lambda, apertureRadius)
				);

	}
	/**
	 * 
	 * @param lightRayDirectionBeforeDiffraction
	 * @param lambda
	 * @param apertureRadius
	 * @param apertureCentre
	 * @param pointOnAperture this is the point at which the light ray hits the aperture
	 * @param normalisedApertureNormalnormalised vector to the disc representing the circular aperture
	 * @return the diffracted light-ray direction, i.e. the light-ray direction before diffraction with a randomised tangential component dictated by the airy dic function
	 * @throws EvanescentException 
	 */
	public static Vector3D getDiffractedLightRayDirection(
			Vector3D lightRayDirectionBeforeDiffraction,
			double lambda,
			double apertureRadius,
			Vector3D apertureCentre,
			Vector3D pointOnAperture,
			Vector3D normalisedApertureNormal
			) throws EvanescentException

	{
		// simulate diffractive blur
		//int i = 0; //counter
//		do {
//			try {
		return PhaseHologram.getOutgoingNormalisedRayDirection(
						lightRayDirectionBeforeDiffraction.getNormalised(),	// incidentNormalisedRayDirection
						getTangentialDirectionComponentChange(
								lambda,
								apertureRadius,
								apertureCentre,
								pointOnAperture,
								normalisedApertureNormal
								),	// tangentialDirectionComponentChange
						normalisedApertureNormal,	// normalisedOutwardsSurfaceNormal
						false	// isReflective
						);
				//if(i>0)	System.err.println("the light ray was evanescent. "+i+" retries were required!");
				//return newLightRayDirection;
				//return Vector3D.sum(newLightRayDirection, Vector3D.difference(apertureCentre, pointOnAperture)).getNormalised();
//			} catch (EvanescentException e) {
//				//i = i+1;
//				//System.err.println("the light ray becomes evanescent after addition of the tangential component. Trying again!"); TODO do this smarter somehow...
//			}
//		}while(true);
	}

	/**
	 * @param lightRayDirectionBeforeDiffraction
	 * @param lambda
	 * @param apertureRadius
	 * @param rHat	unit radial vector through the centre of the aperture and the point the light ray hits the aperture. If zero, it defaults to a random normal vector.
	 * @param normalisedApertureNormalnormalised vector to the disc representing the circular aperture
	 * @return the diffracted light-ray direction, i.e. the light-ray direction before diffraction with a randomised tangential component dictated by the airy dic function.
	 */
	public static Vector3D getDiffractedLightRayDirection(
			Vector3D lightRayDirectionBeforeDiffraction,
			double lambda,
			double apertureRadius,
			Vector3D rHat,
			Vector3D normalisedApertureNormal
			)

	{
		// simulate diffractive blur
		do {	
			try {
				return PhaseHologram.getOutgoingNormalisedRayDirection(
						lightRayDirectionBeforeDiffraction.getNormalised(),	// incidentNormalisedRayDirection
						getTangentialDirectionComponentChange(
								lambda,
								apertureRadius,
								rHat,
								normalisedApertureNormal
								),	// tangentialDirectionComponentChange
						normalisedApertureNormal,	// normalisedOutwardsSurfaceNormal
						false	// isReflective
						);
			} catch (EvanescentException e) {
				System.err.println("the light ray becomes evanescent after addition of the tangential component. Trying again!");
			}
		}while(true);

	}
}
